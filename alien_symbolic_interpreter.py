# Alien Symbolic Interpreter (Prototype v7 - CLI Version with Enhanced UX)
# Each symbol maps to a concept or function with simulated behavior

import random

# Symbol-function mapping (with simulated behaviors)
symbols = {
    "‚óè": lambda ctx: ctx.update({"‚óè": "Universe Initialized"}),
    "‚óê": lambda ctx: ctx.update({"‚óê": "Condition Split"}),
    "‚à¥": lambda ctx: ctx.update({"‚à¥": ["Option A", "Option B", "Option C"]}),
    "‚úß": lambda ctx: ctx.update({"‚úß": random.choice(ctx.get("‚à¥", ["Unknown"]))}),
    "Œ®": lambda ctx: ctx.update({"Œ®": "Quantum Potential"}),
    "‚àÖ": lambda ctx: ctx.update({"‚àÖ": None}),
    "Í©ú": lambda ctx: ctx.update({"Í©ú": "Dimensional Fold Opened"}),
    "‚ßó": lambda ctx: ctx.update({"‚ßó": "Entangled Pair Linked"}),
    "‚áå": lambda ctx: ctx.update({"‚áå": "Oscillation Active"}),
    "‚¨†": lambda ctx: ctx.update({"‚¨†": "Network Transmission"}),
    "‚áß": lambda ctx: ctx.update({"‚áß": "Expanding"}),
    "Œ©": lambda ctx: ctx.update({"Œ©": ctx.get("‚úß", "Observed Reality")}),
    "‚áÄ": lambda ctx: ctx.update({"‚áÄ": "Subtle Motion"}),
    "œï": lambda ctx: ctx.update({"œï": "Spiral Growth"}),
    "‚àû": lambda ctx: ctx.update({"‚àû": "Infinite Potential"}),
}

# Phenomena symbolic dictionary
phenomena = {
    "Quantum Superposition": ("‚à¥ + ‚óê = Œ®", "Multiple possibilities coexist in a partial state until forming a quantum state."),
    "Wave Function Collapse": ("Œ® √ó ‚úß = Œ©", "A quantum state collapses through observation, generating reality."),
    "Quantum Entanglement": ("(‚à¥ ‚àû ‚à¥) = ‚ßó", "Possibilities united infinitely form a mirrored system."),
    "Quantum Tunneling": ("Œ® + ‚àÖ ‚Üí Í©ú", "Potential crosses the void, creating a dimensional transition."),
    "Wormhole": ("‚òç + ‚ú¶‚áå‚ú¶ = Í©ú", "Reflected oppositions connect through a fold in spacetime."),
    "Singularity (Black Hole)": ("‚óè √ó ‚àÖ = Í©ú", "Totality collapses into nothingness, generating a dimensional fold."),
    "Hawking Radiation": ("Í©ú ‚áå (‚úß + ‚àÖ)", "The fold oscillates between collapse and void, releasing energy."),
    "Cosmic Inflation": ("‚àÖ + œï = ‚áß √ó ‚àû", "From the void, growth drives expansion into infinity."),
    "Black Hole Collision": ("(Í©ú + Í©ú) ‚Üí ‚¨† ‚áå ‚áß", "Two folds merge, vibrating in a network and expanding."),
    "Holographic Principle": ("‚óè ‚áå ‚¨† = Œ©", "Totality is reflected in a network, forming reality."),
    "Casimir Effect": ("‚àÖ √ó (‚óê + ‚óê) = ‚áÇ", "The void between nearby dualities generates compression."),
    "Galaxy Formation": ("œï √ó ‚¨† = ‚úß √ó ‚áß", "Growth in a network collapses locally and expands globally."),
    "Neutrinos": ("‚à¥ ‚áå ‚àû = ‚áÄ", "Possibilities oscillate infinitely, moving subtly."),
    "Big Bang": ("‚àÖ ‚Üí ‚óè √ó Í©ú", "From nothing, a totality folds into itself."),
    "Unification of Forces": ("(‚ñ≤ + ‚¨† + ‚áß + ‚úß) = ‚óè", "Force, network, expansion, and collapse converge into unity."),
    "Exotic Matter": ("‚àÖ ‚áå ‚áÇ = Í©ú", "The void under inverted compression folds space."),
    "Quantum Decoherence": ("Œ® √ó ‚¨† = Œ© + ‚àÖ", "A quantum state interacts with a network, collapsing and dissipating."),
    "Strings (String Theory)": ("‚àû ‚áå ‚áß = ‚ßó √ó œï", "Infinite vibrations in expansion form spiraling systems."),
    "Event Horizon": ("‚óè ‚áå Í©ú = ‚óê", "Totality splits at a fold, hiding half."),
    "Inflaton Field Fluctuations": ("‚àÖ √ó œï ‚áå ‚áß = ‚à¥", "The void in a spiral oscillates with expansion, generating possibilities."),
    "Information Paradox": ("(‚óè + ‚úß) ‚áå Í©ú = ‚¨†", "Totality and collapse enter a fold, emerging as a network."),
    "Unruh Effect": ("‚áÄ √ó ‚àÖ = ‚úß", "Motion in the void manifests perceived collapses."),
    "Universe Topology": ("‚óè ‚áå Í©ú √ó œï = ‚àû", "Totality folds and grows in a spiral, extending infinitely."),
}

# Symbolic signal definitions
signals = {
    "FRB 121102": ["‚àû ‚áå ‚áß = ‚ßó √ó œï"],
    "Wow!": ["‚óè ‚áå ‚úß"],
    "BLC1": ["‚óê ‚áå ‚¨†"],
    "GRB": ["‚úß √ó Í©ú"]
}

# Example expressions for demonstration
examples = [
    ("Œ® = ‚à¥ + ‚óê", "Simulates quantum superposition: combining possibilities and a split condition to form a quantum state."),
    ("run Wow!", "Runs the Wow! Signal simulation: a totality oscillating into a collapse."),
    ("explain Big Bang", "Explains the Big Bang phenomenon using its symbolic equation and meaning.")
]

# Symbolic parser with context and conditionals
def interpret(expression, context):
    if expression.startswith("if"):
        condition = expression[3:].strip(":")
        left, op, right = condition.split()
        left_val = context.get(left, None)
        right_val = context.get(right, None)
        condition_met = (left_val == right_val if op == "==" else left_val != right_val)
        return f"Condition {left} {op} {right} => {condition_met}"

    if "‚Üí" in expression:
        origin, target = expression.split("‚Üí")
        origin = origin.strip()
        target = target.strip()
        context[target] = context.get(origin, None)
        return f"{origin} ‚Üí {target} => {context.get(target)}"

    tokens = expression.replace("=", " = ").split()
    output = []
    for token in tokens:
        if token in symbols:
            symbols[token](context)
            output.append(f"{token} => {context.get(token)}")
        elif token == "=":
            output.append("=")
        else:
            output.append(token)
    return " ".join(output)

# CLI runner for symbolic scripts
def run_script(script_lines, context):
    for line in script_lines:
        print(f">>> {line}")
        print(interpret(line, context))
        print("---")

# Main CLI loop
if __name__ == "__main__":
    context = {}  # Initialize an empty context for each session
    print("üëΩ Welcome to the Alien Symbolic Interpreter (Prototype v7) üëΩ")
    print("This tool simulates a 'language of shapes' for cosmic signals and phenomena.")
    print("Explore the universe through symbolic equations inspired by real physics!")
    print("\nHow to Use:")
    print("- Type 'help' to see all available commands.")
    print("- Type 'symbols' to list all available symbols and their meanings.")
    print("- Type 'signals' to list preset cosmic signals (e.g., Wow!, FRB 121102).")
    print("- Type 'phenomena' to list known cosmic phenomena (e.g., Quantum Superposition).")
    print("- Type 'examples' to see example commands to get started.")
    print("- Type 'run SIGNAL_NAME' to simulate a signal (e.g., 'run Wow!').")
    print("- Type 'explain PHENOMENON_NAME' to learn about a phenomenon (e.g., 'explain Big Bang').")
    print("- Or type a symbolic expression directly (e.g., 'Œ® = ‚à¥ + ‚óê').")
    print("- Type 'exit' to quit.")
    print("\nTry starting with 'examples' or 'help' to get a feel for the tool!")

    while True:
        user_input = input(">> ").strip()

        if user_input.lower() == "exit":
            print("Goodbye, human. Keep exploring the cosmos!")
            break

        elif user_input.lower() == "help":
            print("\nAvailable Commands:")
            print("- help: Show this help message.")
            print("- symbols: List all available symbols and their meanings.")
            print("- signals: List preset cosmic signals (e.g., Wow!, FRB 121102).")
            print("- phenomena: List known cosmic phenomena (e.g., Quantum Superposition).")
            print("- examples: Show example commands to get started.")
            print("- run SIGNAL_NAME: Simulate a cosmic signal (e.g., 'run Wow!').")
            print("- explain PHENOMENON_NAME: Learn about a phenomenon (e.g., 'explain Big Bang').")
            print("- [expression]: Type a symbolic expression directly (e.g., 'Œ® = ‚à¥ + ‚óê').")
            print("- exit: Quit the program.")

        elif user_input.lower() == "symbols":
            print("\nAvailable Symbols and Their Meanings:")
            for symbol, func in symbols.items():
                func(context)  # Update context to get the meaning
                print(f"- {symbol}: {context.get(symbol)}")

        elif user_input.lower() == "signals":
            print("\nAvailable Signals:")
            for name in signals:
                print(f"- {name}")

        elif user_input.lower() == "phenomena":
            print("\nKnown Cosmic Phenomena:")
            for name in phenomena:
                print(f"- {name}")

        elif user_input.lower() == "examples":
            print("\nExample Commands to Get Started:")
            for cmd, desc in examples:
                print(f"- '{cmd}': {desc}")

        elif user_input.startswith("run "):
            sig_name = user_input[4:].strip()
            if sig_name in signals:
                run_script(signals[sig_name], context)
            else:
                print(f"Unknown signal: {sig_name}. Type 'signals' to see available options.")

        elif user_input.startswith("explain "):
            pheno = user_input[8:].strip()
            if pheno in phenomena:
                eq, meaning = phenomena[pheno]
                print(f"\n{pheno}\n{eq}\n‚Üí {meaning}")
            else:
                print(f"Unknown phenomenon: {pheno}. Type 'phenomena' to see available options.")

        else:
            print(interpret(user_input, context))
